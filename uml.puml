@startuml

package bitcamp.myapp {
  class ClientApp {
    - listeners: List<ApplicationListener>
    - appCtx: ApplicationContext
    + main(args: String[]): void
    - addApplicationListener(listener: ApplicationListener): void
    - removeApplicationListener(listener: ApplicationListener): void
    - execute(): void
  }
}

package bitcamp.myapp.command {
  class JoinGameCommand {
    - appCtx: ApplicationContext
    + JoinGameCommand(appCtx: ApplicationContext)
    + execute(menuName: String): void
  }

  class MultiGameCommand {
    - appCtx: ApplicationContext
    - room: Room
    - array: String[][]
    + MultiGameCommand(appCtx: ApplicationContext, room: Room)
    + execute(menuName: String): void
  }

  class MakeRoomCommand {
    - appCtx: ApplicationContext
    + MakeRoomCommand(appCtx: ApplicationContext)
    + execute(menuName: String): void
  }
}

package bitcamp.myapp.listener {
  class InitApplicationListener {
    + onStart(ctx: ApplicationContext): void
    + onShutdown(ctx: ApplicationContext): void
  }
}

package bitcamp.command {
  interface Command {
    + execute(menuName: String): void
  }
}

package bitcamp.context {
  class ApplicationContext {
    - objContainer: Map<String, Object>
    - mainMenu: MenuGroup
    + setAttribute(name: String, value: Object): void
    + getAttribute(name: String): Object
    + getMainMenu(): MenuGroup
  }
}

package bitcamp.listener {
  interface ApplicationListener {
    + onStart(ctx: ApplicationContext): void
    + onShutdown(ctx: ApplicationContext): void
  }
}

package bitcamp.menu {
  abstract class AbstractMenu {
    - title: String
    + AbstractMenu(title: String)
    + equals(o: Object): boolean
    + hashCode(): int
    + getTitle(): String
  }

  class MenuGroup {
    - parent: MenuGroup
    - children: ArrayList<Menu>
    - exitMenuTitle: String
    + MenuGroup(title: String)
    + execute(): void
  }

  class MenuItem {
    - title: String
    + MenuItem(title: String)
    + execute(): void
  }

  interface Menu {
    + getTitle(): String
    + execute(): void
  }
}

package bitcamp.util {
  class Prompt {
    + input(message: String, args: Object[]): String
    + inputInt(message: String, args: Object[]): int
    + close(): void
    + printHistory(): void
  }
}

package bitcamp.vo {
  class Room {
    - no: int
    - port: int
    - title: String
    - size: int
    - count: int
    - memberCount: int
    + Room()
    + setSeqRoomNo(): int
    + setSeqPort(): int
    + getNo(): int
    + getPort(): int
    + getIp(): String
    + getTitle(): String
    + setTitle(title: String): void
    + getSize(): int
    + setSize(size: int): void
    + getCount(): int
    + setCount(count: int): void
    + getMemberCount(): int
  }
}

ClientApp "1" --> "many" ApplicationListener
ClientApp "1" --> ApplicationContext
InitApplicationListener --> ApplicationListener
JoinGameCommand --> ApplicationContext
JoinGameCommand --> Command
MultiGameCommand --> ApplicationContext
MultiGameCommand --> Room
MultiGameCommand --> Command
MakeRoomCommand --> ApplicationContext
MakeRoomCommand --> Command
ApplicationContext --> MenuGroup
MenuGroup --> AbstractMenu
MenuItem --> AbstractMenu

@enduml
